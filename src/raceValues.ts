import type { RunningStyle } from "./interfaces";

export enum RacePhase {
  Early = "early",
  Middle = "middle",
  Final = "final",
}

export const RACE_FACTORY_VALUES = {
  TRACK_MIN_CORNER_LENGTH: 10000,
  TRACK_MAX_CORNER_LENGTH: 30000,
  TRACK_MIN_FINAL_STRAIGHT: 30000,
  TRACK_MIN_CORNER_COUNT: 1,
  TRACK_MAX_CORNER_COUNT: 4,
  TRACK_MIN_LENGTH: 120000,
  TRACK_MAX_LENGTH: 360000,
};

export const RACE_SIMULATE_VALUES = {
  UNIT: 100,
  CLOSE_POSITION_BLOCK: 100,
  CLOSE_POSITION_INNER: 300,
  OPTIMAL_SPURT_BASE: 1800,
  PACE_SENSE_BASE: 100,
  PACE_SENSE_STEP: 10,
  OPTIMAL_SPURT_PENALTY: 1000,
  POSITION_FIGHT_RANGE: 10000,
  POSITION_FIGHT_STAMINA: 0.1,
  SLIPSTREAM_MIN_DIST: 1000,
  SLIPSTREAM_MAX_DIST: 3000,
  SLIPSTREAM_SPEED_BONUS: 1.0,
  SLIPSTREAM_ACCEL_BONUS: 0.22,
  GATE_PENALTY_PER: 0.005,
  CORNER_BONUS_PER: 0.01,
  EARLY_PHASE_SPEED: 0.18,
  EARLY_PHASE_STAMINA: 0.7,
  MIDDLE_PHASE_SPEED: 0.22,
  MIDDLE_PHASE_STAMINA: 1.0,
  FINAL_PHASE_STAMINA: 1.2,
  FINAL_PHASE_SPURT_BONUS: 0.01,
  FINAL_PHASE_SPURT_STAMINA: 1.5,
  FINAL_PHASE_SPURT_STAMINA_MULT: 1.5,
  STAMINA_PENALTY_RATIO: 0.5,
  LOW_STAMINA_SPEED: 0.9,
  WEIGHT_PENALTY: 0.03,
  TEMPERAMENT_VARIANCE: 0.25,
  MOVE_FACTOR_MIN: 0.95,
  MOVE_FACTOR_RANGE: 0.05,
  RANDOM_BASE: 0.5,
  MAXSPEED_STAT: 1200,
  MAXSPEED_BASESPEED: 0.7,
  MAXSPEED_POWER: 0.3,
  MAXSPEED_TEMPERAMENT: 0.1,
  ACCEL_POWER: 0.2,
  ACCEL_TEMPERAMENT: 0.1,
  SPEED_MPS: 1600,
};

// Horse and Track Generation Constants
export const HORSE_VALUES = {
  WEIGHT_MIN: 480,
  WEIGHT_MAX: 520,
  STAT_MIN: 700,
  STAT_MAX: 900,
  TEMPERAMENT_MIN: 1,
  TEMPERAMENT_MAX: 5,
  RUNNING_STYLES: ["선행", "선입", "차분", "추입"] as RunningStyle[],
};

export const TRACK_VALUES = {
  LENGTH_MIN: 1000,
  LENGTH_MAX: 2000,
  CORNER_COUNT_MIN: 1,
  CORNER_COUNT_MAX: 4,
  STAT_WEIGHT_MIN: 0.8,
  STAT_WEIGHT_MAX: 1.2,
};

// Centralized random utility functions
export function randInt(min: number, max: number): number {
  return min + Math.floor(Math.random() * (max - min + 1));
}

export function randFloat(min: number, max: number): number {
  return min + Math.random() * (max - min);
}
